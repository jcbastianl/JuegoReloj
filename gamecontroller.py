# gamecontroller.py - Controlador del Juego Solitario Reloj
# Este archivo maneja la coordinaci√≥n entre el modelo y la vista del juego

from gamemodel import ModeloJuego
from gameview import VistaJuego
from assets import GestorRecursos

class ControladorJuego:
    """
    Clase que act√∫a como intermediario entre el modelo (l√≥gica del juego) 
    y la vista (interfaz gr√°fica). Se encarga de coordinar las acciones del usuario.
    """
    
    def __init__(self, ventana_padre):
        """
        Inicializa el controlador y todos los componentes del juego.
        
        Args:
            ventana_padre: La ventana principal de la aplicaci√≥n
        """
        self.ventana_padre = ventana_padre
        self.modelo = ModeloJuego()                                  # La l√≥gica del juego
        self.recursos = GestorRecursos()                             # Carga las im√°genes de las cartas
        self.vista = VistaJuego(ventana_padre, self, self.recursos)  # La interfaz gr√°fica
        self.vista.pack(fill="both", expand=True)
        self.mostrar_menu_principal()

    def mostrar_menu_principal(self):
        """
        Muestra el men√∫ principal y reinicia el estado del juego.
        """
        self.modelo.juego_terminado = True  # Marcar que no hay juego activo
        self.modelo.modo_juego = None       # Limpiar el modo de juego
        self.vista.mostrar_menu()           # Mostrar el men√∫ en la vista

    def iniciar_juego_nuevo(self, modo):
        """
        Inicia un nuevo juego en el modo especificado (autom√°tico o manual).
        
        Args:
            modo: 'auto' para modo autom√°tico, 'manual' para modo manual
        """
        # 1. Configurar la l√≥gica del juego en el modelo
        self.modelo.modo_juego = modo
        self.modelo.barajar_y_repartir()  # Barajar cartas y repartirlas en montones
        
        # 2. Actualizar la vista para mostrar el tablero
        self.actualizar_vista()

        # 3. Iniciar el modo de juego correspondiente
        if modo == 'auto':
            self.vista.mostrar_mensaje_estado("Modo Autom√°tico iniciado. Observa c√≥mo se juega.")
            # Esperar 1 segundo antes de empezar para que el usuario vea el estado inicial
            self.ventana_padre.after(1000, self.ejecutar_turno_automatico)
        else:
            self.vista.mostrar_mensaje_estado("Modo Manual iniciado. Haz clic en el mont√≥n correcto.")

    def manejar_clic_monton(self, indice_monton):
        """
        Maneja cuando el usuario hace clic en un mont√≥n durante el modo manual.
        
        Args:
            indice_monton: N√∫mero del mont√≥n donde hizo clic (1-13)
        """
        # Si el juego termin√≥ o no estamos en modo manual, ignorar el clic
        if self.modelo.juego_terminado or self.modelo.modo_juego != 'manual':
            return

        # Si hay una revelaci√≥n pendiente, solo permitir clic en el mont√≥n correcto
        if self.modelo.revelacion_pendiente:
            if indice_monton == self.modelo.revelacion_pendiente:
                carta_revelada = self.modelo.intentar_revelar_de_monton(indice_monton)
                if carta_revelada:
                    self.vista.mostrar_carta_revelada(carta_revelada, indice_monton)
                    self.vista.mostrar_mensaje_estado(f"Nueva carta revelada: {carta_revelada}. ¬°A jugar!")
                else:
                    self.modelo.juego_terminado = True
                    self.ventana_padre.after(500, self.verificar_fin_juego)
                self.actualizar_vista()
            else:
                self.vista.mostrar_mensaje_estado(f"Debes hacer clic en el mont√≥n {self.modelo.revelacion_pendiente} para revelar.")
            return

        # L√≥gica normal de movimiento
        exito, mensaje = self.modelo.ejecutar_paso_manual(indice_monton)
        self.vista.mostrar_mensaje_estado(mensaje)

        if exito:
            # Ocultar efectos de carta revelada anterior y actualizar
            self.vista.ocultar_carta_revelada()
            self.actualizar_vista()

        if self.modelo.juego_terminado:
            self.ventana_padre.after(1000, self.verificar_fin_juego)

    def ejecutar_turno_automatico(self):
        """
        Ejecuta un turno completo en modo autom√°tico.
        
        Proceso del turno autom√°tico:
        1. Verifica si hay una revelaci√≥n pendiente y la maneja
        2. Toma una carta del mazo y la coloca en el mont√≥n correspondiente
        3. Maneja animaciones y mensajes de estado
        4. Programa el siguiente turno o termina el juego
        """
        # Verificar si el juego ya termin√≥
        if self.modelo.juego_terminado:
            self.verificar_fin_juego()
            return

        # Si no hay carta actual, el juego puede haber terminado
        if not self.modelo.carta_actual:
            self.verificar_fin_juego()
            return

        # Obtener informaci√≥n para la animaci√≥n antes de mover
        carta_a_mover = self.modelo.carta_actual
        destino = self.modelo.obtener_destino_carta(carta_a_mover)
        origen = self.modelo.ultimo_movimiento_desde if self.modelo.ultimo_movimiento_desde is not None else 13
        
        # Ejecutar el paso autom√°tico en el modelo
        exito, mensaje = self.modelo.ejecutar_paso_automatico()

        def despues_animacion():
            """Funci√≥n que se ejecuta despu√©s de completar la animaci√≥n de movimiento"""
            self.vista.mostrar_mensaje_estado(mensaje)
            self.actualizar_vista()
            if not self.modelo.juego_terminado:
                # Continuar con el siguiente turno despu√©s de una pausa
                self.ventana_padre.after(800, self.ejecutar_turno_automatico)
            else:
                # Verificar el fin del juego despu√©s de una pausa
                self.ventana_padre.after(500, self.verificar_fin_juego)

        # Animar el movimiento de la carta
        self.vista.animar_movimiento_carta(carta_a_mover, origen, destino, despues_animacion)

    def actualizar_vista(self):
        """
        Actualiza la vista con el estado actual del modelo.
        
        Esta funci√≥n:
        1. Obtiene el estado actual del tablero del modelo
        2. Actualiza el dibujo del tablero en la vista
        3. Actualiza las etiquetas de estado con la carta actual
        """
        estado_tablero = self.modelo.obtener_estado_tablero()
        self.vista.dibujar_tablero(estado_tablero)
        # Actualizar tambi√©n la informaci√≥n de la carta actual
        carta_actual = estado_tablero.get('carta_actual')
        self.vista.actualizar_etiquetas_estado(carta_actual)

    def verificar_fin_juego(self):
        """
        Verifica si el juego ha terminado y muestra el resultado apropiado.
        
        Determina si el juego fue ganado o perdido y actualiza la interfaz
        con el mensaje correspondiente y opciones de men√∫.
        """
        if self.modelo.juego_terminado:
            estado = self.modelo.verificar_estado_juego()
            if estado == 'victoria':
                mensaje = "¬°GANASTE! Todas las cartas est√°n en su lugar correcto."
            else:
                mensaje = "¬°Perdiste! Salieron los 4 Reyes antes de tiempo."
            
            self.vista.mostrar_mensaje_fin_juego("Juego Terminado", mensaje)
            return True
        return False
    
    def barajar_cartas(self):
        """
        Baraja las cartas con animaci√≥n - solo permitido cuando no hay juego activo.
        
        Esta funci√≥n:
        1. Verifica que no haya un juego en progreso
        2. Inicia la animaci√≥n de barajado
        3. Baraja las cartas en el modelo despu√©s de la animaci√≥n
        4. Muestra el nuevo orden en la consola
        5. Vuelve al men√∫ principal
        """
        # Verificar si hay un juego en progreso
        if hasattr(self.modelo, 'modo_juego') and self.modelo.modo_juego and not self.modelo.juego_terminado:
            self.vista.mostrar_mensaje_estado("‚ùå No puedes barajar durante un juego activo. Termina el juego primero.")
            return
        
        # Mostrar mensaje de barajado
        self.vista.mostrar_mensaje_estado("üé≤ Barajando cartas...")
        
        # Definir qu√© hacer despu√©s de la animaci√≥n
        def despues_animacion_barajado():
            """Funci√≥n que se ejecuta despu√©s de completar la animaci√≥n de barajado"""
            try:
                # Baraja las cartas en el modelo
                self.modelo.barajar_y_repartir()
                
                # Imprimir orden de las cartas en consola para prop√≥sitos educativos
                print("\n" + "="*50)
                print("üé¥ NUEVO ORDEN DE CARTAS DESPU√âS DEL BARAJADO:")
                print("="*50)
                
                for numero_monton in range(1, 14):
                    cartas_en_monton = self.modelo.montones_ocultos[numero_monton]
                    nombre_monton = self._obtener_nombre_monton(numero_monton)
                    print(f"Mont√≥n {numero_monton:2d} ({nombre_monton:>11}): {cartas_en_monton}")
                
                print("="*50)
                print(f"Total de cartas: {sum(len(monton) for monton in self.modelo.montones_ocultos.values())}")
                print("="*50 + "\n")
                
                # Volver al men√∫ principal despu√©s de barajar
                self.mostrar_menu_principal()
                self.vista.mostrar_mensaje_estado("¬°Cartas barajadas! Selecciona un modo de juego.")
                
            except Exception as e:
                print(f"Error en despues_animacion_barajado: {e}")
                # Si hay error, al menos volver al men√∫
                self.mostrar_menu_principal()
        
        # Iniciar la animaci√≥n de barajado con callback
        self.vista.animar_barajado(funcion_callback=despues_animacion_barajado)

    def terminar_juego_actual(self):
        """
        Termina el juego actual y vuelve al men√∫ principal.
        
        Esta funci√≥n fuerza el fin del juego actual y regresa al usuario
        al men√∫ principal para que pueda iniciar un nuevo juego.
        """
        self.modelo.juego_terminado = True
        self.modelo.modo_juego = None
        self.vista.mostrar_mensaje_estado("Juego terminado. ¬°Vuelve a intentarlo!")
        self.ventana_padre.after(500, self.mostrar_menu_principal)

    def salir_juego(self):
        """
        Cierra la aplicaci√≥n completamente.
        
        Termina la ejecuci√≥n del programa y cierra la ventana principal.
        """
        self.ventana_padre.destroy()
    
    def mostrar_menu_principal(self):
        """
        Muestra el men√∫ principal del juego.
        
        Resetea el estado del juego y muestra las opciones del men√∫ principal
        para que el usuario pueda seleccionar un modo de juego.
        """
        # Resetear el estado del modelo
        self.modelo.reiniciar_juego()
        
        # Mostrar el men√∫ en la vista
        self.vista.mostrar_menu()
    
    def _obtener_nombre_monton(self, numero_monton):
        """
        Convierte n√∫mero de mont√≥n a nombre de posici√≥n en el reloj.
        
        Args:
            numero_monton: N√∫mero del mont√≥n (1-13)
            
        Returns:
            str: Nombre descriptivo de la posici√≥n en el reloj
        """
        nombres_reloj = {
            1: "1 (As)", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6",
            7: "7", 8: "8", 9: "9", 10: "10", 11: "J (Jack)",
            12: "Q (Queen)", 13: "K (Rey)"
        }
        return nombres_reloj.get(numero_monton, str(numero_monton))